[{"E:\\Practice\\senior_2\\src\\index.js":"1","E:\\Practice\\senior_2\\src\\pages\\success\\Success.jsx":"2","E:\\Practice\\senior_2\\src\\components\\toast\\toast.jsx":"3","E:\\Practice\\senior_2\\src\\components\\sign_select\\Select.jsx":"4","E:\\Practice\\senior_2\\src\\App.js":"5","E:\\Practice\\senior_2\\src\\components\\sign_code\\Code.jsx":"6","E:\\Practice\\senior_2\\src\\components\\select_option\\Option.jsx":"7","E:\\Practice\\senior_2\\src\\components\\sign_form\\FormHoc.jsx":"8","E:\\Practice\\senior_2\\src\\components\\sign_form\\Form.jsx":"9","E:\\Practice\\senior_2\\src\\components\\sign_input\\Input.jsx":"10","E:\\Practice\\senior_2\\src\\components\\select_input\\Input.jsx":"11","E:\\Practice\\senior_2\\src\\components\\toast\\index.jsx":"12","E:\\Practice\\senior_2\\src\\pages\\sign\\Sign.jsx":"13","E:\\Practice\\senior_2\\src\\router\\router.js":"14"},{"size":273,"mtime":1609403997354,"results":"15","hashOfConfig":"16"},{"size":854,"mtime":1609579293188,"results":"17","hashOfConfig":"16"},{"size":305,"mtime":1609499312798,"results":"18","hashOfConfig":"16"},{"size":5489,"mtime":1610087178611,"results":"19","hashOfConfig":"16"},{"size":369,"mtime":1610069077493,"results":"20","hashOfConfig":"16"},{"size":3420,"mtime":1610075118748,"results":"21","hashOfConfig":"16"},{"size":1863,"mtime":1610005375347,"results":"22","hashOfConfig":"16"},{"size":3483,"mtime":1610087574700,"results":"23","hashOfConfig":"16"},{"size":3838,"mtime":1610006132469,"results":"24","hashOfConfig":"16"},{"size":2235,"mtime":1610070687805,"results":"25","hashOfConfig":"16"},{"size":944,"mtime":1610087390071,"results":"26","hashOfConfig":"16"},{"size":641,"mtime":1609499298925,"results":"27","hashOfConfig":"16"},{"size":7926,"mtime":1610847251687,"results":"28","hashOfConfig":"16"},{"size":334,"mtime":1609577484327,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"kyurx8",{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Practice\\senior_2\\src\\index.js",[],["66","67"],"E:\\Practice\\senior_2\\src\\pages\\success\\Success.jsx",["68","69"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./Success.scss\";\r\nimport log from \"../../imgs/successLog.png\";\r\n\r\nexport const Success = (props) => {\r\n  const [course, setCourse] = useState(\"\");\r\n  useEffect(() => {\r\n    if (props.location.hasOwnProperty(\"query\")) {\r\n      window.sessionStorage.setItem(\"course\", props.location.query.course);\r\n    }\r\n    setCourse(sessionStorage.getItem(\"course\"));\r\n  });\r\n  return course ? (\r\n    <div className=\"success\">\r\n      <img className=\"log\" src={log} />\r\n      <i className=\"chenggong icon icon-chenggong\"></i>\r\n      <p className=\"successText\">您已成功报名【{course}】</p>\r\n      <p className=\"successTips\">\r\n        敬请等待平台人员通知，请留意手机、邮箱哦~ 可关注微信公众号，联系客服\r\n      </p>\r\n    </div>\r\n  ) : (\r\n    <span>404</span>\r\n  );\r\n};\r\n","E:\\Practice\\senior_2\\src\\components\\toast\\toast.jsx",[],"E:\\Practice\\senior_2\\src\\components\\sign_select\\Select.jsx",["70"],"import React, { useState, useRef, useEffect, useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport FormHok from \"../sign_form/FormHoc\";\r\nimport { Option } from \"../select_option/Option\";\r\nimport { Input } from \"../select_input/Input\";\r\nimport { FormContext } from \"../sign_form/Form\";\r\n\r\nimport \"./Select.scss\";\r\nconst propTypes = {\r\n  placeholder: PropTypes.string,\r\n  name: PropTypes.string,\r\n  value: PropTypes.string,\r\n  label: PropTypes.string,\r\n  errors: PropTypes.arrayOf(PropTypes.string),\r\n};\r\nconst defaultProps = {\r\n  value: \"\",\r\n};\r\nconst Select = (props) => {\r\n  const formContext = useContext(FormContext);\r\n  const { status, setStatus } = formContext || {};\r\n  const { label, name, placeholder, required } = props;\r\n  // 控制option显示/隐藏\r\n  const [visible, setVisible] = useState(false);\r\n  // 存储select的值\r\n  const [selectValue, setSelectValue] = useState({\r\n    label: \"\",\r\n    value: placeholder,\r\n  });\r\n  const [inputPlaceholder, setInputPlaceholder] = useState(\"\");\r\n  const [selectOtherValue, setSelectOtherValue] = useState(\"\");\r\n  // 当前选择的菜单项\r\n  const [currentItem, setCurrentItem] = useState(false);\r\n  const [currErrors, setCurrErrors] = useState(\"\");\r\n  // 当前的input框\r\n  const selectRef = useRef(null);\r\n  const findText = (optionList, label) => {\r\n    for (let key in optionList) {\r\n      if (optionList[key].text === label && optionList[key].require) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n  const getOption = (optionList) => {\r\n    let option = [];\r\n    Object.keys(optionList).forEach(function (index) {\r\n      option.push(optionList[index].text);\r\n    });\r\n    return option;\r\n  };\r\n  useEffect(() => {\r\n    if (status) {\r\n      getValue();\r\n      setStatus(false);\r\n    }\r\n    // 将option中的值存起来\r\n    if (selectValue.label) {\r\n      props.onChange(selectValue);\r\n    }\r\n    // 当有其他选项的时候\r\n    if (props.optionList) {\r\n      let res = props.optionList.find((item) => {\r\n        return item.text === selectValue.label;\r\n      });\r\n      if (res && res.placeholder) {\r\n        setCurrentItem(true);\r\n        setInputPlaceholder(res.placeholder);\r\n      } else {\r\n        setCurrentItem(false);\r\n      }\r\n    }\r\n  }, [selectValue, status]);\r\n\r\n  // 为空判断\r\n  const isEmpty = (obj) => {\r\n    if (Object.keys(obj).length === 0) {\r\n      return true; // 如果为空,返回true\r\n    }\r\n    return false;\r\n  };\r\n  const hasError = !isEmpty(props.errors);\r\n  const renderErrors = () => {\r\n    if (!hasError) {\r\n      return null;\r\n    }\r\n    const errors = props.errors.map((errMsg, i) => (\r\n      <li className=\"selectError\" key={i}>\r\n        <i className=\"icon icon-error\"></i>\r\n        <span>{errMsg}</span>\r\n      </li>\r\n    ));\r\n    return <ul> {errors} </ul>;\r\n  };\r\n  const selectData = (e) => {\r\n    setStatus(false);\r\n    setVisible(true);\r\n  };\r\n  // option中点击空白区域\r\n  const onBlur = (e) => {\r\n    if (props.onBlur()) {\r\n      props.onBlur();\r\n    }\r\n  };\r\n  // 二级输入框失焦触发\r\n  const getValue = (value) => {\r\n    setSelectValue({ label: selectValue.label, value: value });\r\n    props.onBlur(selectValue);\r\n    if (findText(props.optionList, selectValue.label) && !value) {\r\n      setCurrErrors(\"不能为空\");\r\n    } else {\r\n      setCurrErrors(\"\");\r\n    }\r\n  };\r\n  // 二级输入框触发的onchange\r\n  const onchang = (data) => {\r\n    setSelectOtherValue(data);\r\n    if (props.onChange) {\r\n      props.onChange({ label: selectValue.label, value: data });\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"form-select-box\">\r\n        <div className=\"form-select-con\">\r\n          <div className=\"form-select-item clearfix\">\r\n            <span className=\"form-select-required\">{required}</span>\r\n            <label className=\"form-select-name\">{label}</label>\r\n            <div className=\"form-select-fl\">\r\n              <div className=\"form-select\">\r\n                <input\r\n                  name={name}\r\n                  placeholder={placeholder}\r\n                  value={selectValue.label}\r\n                  readOnly\r\n                  onClick={selectData}\r\n                  ref={selectRef}\r\n                />\r\n              </div>\r\n              <i className=\"row icon icon-row\"></i>\r\n            </div>\r\n          </div>\r\n          {!currErrors ? renderErrors() : null}\r\n        </div>\r\n        {currentItem ? (\r\n          <div>\r\n            <Input\r\n              validators={props.validators}\r\n              placeholder={inputPlaceholder}\r\n              onChange={(data) => {\r\n                onchang(data);\r\n              }}\r\n              onBlur={getValue}\r\n              value={selectOtherValue}\r\n            />\r\n            <li\r\n              className={\r\n                currErrors ? \"seletInput errorShow\" : \"seletInput errorHidden\"\r\n              }\r\n            >\r\n              <i className=\"icon icon-error\"></i>\r\n              <span>{currErrors}</span>\r\n            </li>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n      <Option\r\n        visible={visible}\r\n        setCurrErrors={setCurrErrors}\r\n        onNotVisibleArea={setVisible}\r\n        onSetSelectValue={setSelectValue}\r\n        selectRef={selectRef}\r\n        onBlur={onBlur}\r\n        optionList={getOption(props.optionList)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nSelect.propTypes = propTypes;\r\nSelect.defaultProps = defaultProps;\r\nconst FormSelect = FormHok(Select);\r\nexport { Select };\r\nexport default FormSelect;\r\n","E:\\Practice\\senior_2\\src\\App.js",[],["71","72"],"E:\\Practice\\senior_2\\src\\components\\sign_code\\Code.jsx",["73"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport FormHok from \"../sign_form/FormHoc\";\r\nimport { FormContext } from \"../sign_form/Form\";\r\nimport \"./Code.scss\";\r\nimport Toast from \"../../components/toast/index\";\r\nconst propTypes = {\r\n  placeholder: PropTypes.string,\r\n  name: PropTypes.string,\r\n  value: PropTypes.string,\r\n  label: PropTypes.string,\r\n  type: PropTypes.string,\r\n  errors: PropTypes.arrayOf(PropTypes.string),\r\n};\r\nconst defaultProps = {\r\n  value: \"\",\r\n};\r\n// 它将从表单上下文中接收错误和值\r\nconst Code = (props) => {\r\n  const formContext = useContext(FormContext);\r\n  const { data, errors } = formContext || {};\r\n  // 是否是必选项\r\n  const { label, name, placeholder, value, required } = props;\r\n  const [telStatus, setTelStatus] = useState(false);\r\n  // 匹配手机号的正则\r\n  const phoneStr = /^[1]([3-9])[0-9]{9}$/;\r\n  useEffect(() => {\r\n    if (phoneStr.test(data.phone) && errors.phone) {\r\n      setTelStatus(true);\r\n    } else setTelStatus(false);\r\n  }, [data]);\r\n  // 为空判断\r\n  const isEmpty = (obj) => {\r\n    if (Object.keys(obj).length === 0) {\r\n      return true; // 如果为空,返回true\r\n    }\r\n    return false;\r\n  };\r\n  const hasError = !isEmpty(props.errors);\r\n  const renderErrors = () => {\r\n    if (!hasError) {\r\n      return null;\r\n    }\r\n    const errors = props.errors.map((errMsg, i) => (\r\n      <li className=\"errorLi\" key={i}>\r\n        <i className=\"icon icon-error\"></i>\r\n        <span>{errMsg}</span>\r\n      </li>\r\n    ));\r\n    return <ul> {errors} </ul>;\r\n  };\r\n  const onChange = (e) => {\r\n    props.onChange(e.target.value);\r\n  };\r\n  const onBlur = (e) => {\r\n    props.onBlur(e);\r\n  };\r\n  // 获取验证码\r\n  function getCode(e) {\r\n    if (telStatus) {\r\n      let second = 60;\r\n      let timer = setInterval(() => {\r\n        if (second > 0) {\r\n          second -= 1;\r\n          e.target.style.background = \"#dedede\";\r\n          e.target.innerHTML = second + \"秒后重新获取\";\r\n        } else if (second <= 0) {\r\n          e.target.style.background = \"#00C176\";\r\n          e.target.innerHTML = \"获取验证码\";\r\n          clearInterval(timer);\r\n        }\r\n      }, 1000);\r\n    } else {\r\n      Toast.info(\"请先输入手机号\");\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"form-code-box\">\r\n      <div className=\"form-code-con\">\r\n        <div className=\"form-code-item clearfix\">\r\n          <span className=\"form-code-required\">{required}</span>\r\n          <label className=\"form-code-name\">{label}</label>\r\n          <div className=\"form-code-fl\">\r\n            <div className=\"form-code\">\r\n              <input\r\n                type=\"number\"\r\n                autoComplete=\"off\"\r\n                name={name}\r\n                placeholder={placeholder}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                value={value}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div\r\n            className={\r\n              telStatus ? \"code-btn code-btn-green\" : \"code-btn code-btn-wgite\"\r\n            }\r\n            onClick={(e) => getCode(e)}\r\n          >\r\n            获取验证码\r\n          </div>\r\n        </div>\r\n        {renderErrors()}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nCode.propTypes = propTypes;\r\nCode.defaultProps = defaultProps;\r\nconst FormTextInput = FormHok(Code);\r\nexport { Code };\r\nexport default FormTextInput;\r\n","E:\\Practice\\senior_2\\src\\components\\select_option\\Option.jsx",[],["74","75"],"E:\\Practice\\senior_2\\src\\components\\sign_form\\FormHoc.jsx",["76"],"import React, { useContext, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FormContext } from \"./Form\";\r\nconst propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  validators: PropTypes.arrayOf(PropTypes.func),\r\n};\r\nconst FormHoc = (InputComponent) => {\r\n  const WrappedWithForm = (props) => {\r\n    // 订阅表单上下文\r\n    const {\r\n      data,\r\n      errors,\r\n      setFieldValue,\r\n      registerInput,\r\n      setFieldError,\r\n    } = useContext(FormContext);\r\n    // Input\r\n    // 注册到表单上下文\r\n    // 包装的输入获取正确的输入值和错误\r\n    const inputValue = data[props.name];\r\n    const inputErrors = errors[props.name] || [];\r\n    const findName = (optionList, label) => {\r\n      for (var key in optionList) {\r\n        //执行相关操作\r\n        if (\r\n          optionList[key].text === label &&\r\n          optionList[key].placeholder !== \"\"\r\n        )\r\n          return true;\r\n      }\r\n    };\r\n    // 匹配正则错误验证\r\n    const regValidator = (val, rules) => {\r\n      if (val && rules) {\r\n        const reg = new RegExp(rules.Reg);\r\n        return reg.test(val) ? [] : [rules.msg];\r\n      }\r\n      return [];\r\n    };\r\n    // 不能为空错误验证\r\n    const requiredValidator = (val) => {\r\n      if (!val) {\r\n        return [\"不能为空\"];\r\n      }\r\n      return [];\r\n    };\r\n    const arrValidators = (rules, required) => {\r\n      let arr = [];\r\n      if (rules) {\r\n        arr.push(regValidator);\r\n      }\r\n      if (required) {\r\n        arr.push(requiredValidator);\r\n      }\r\n      return arr;\r\n    };\r\n    useEffect(() => {\r\n      // 值以对象还是字符串\r\n      if (typeof data[props.name] === \"object\") {\r\n        if (props.optionList) {\r\n          data[props.name] = findName(props.optionList, data[props.name].label)\r\n            ? data[props.name]\r\n            : data[props.name].label;\r\n        } else {\r\n          data[props.name] = data[props.name].label;\r\n        }\r\n      }\r\n      // 将当前组件进行存储\r\n      registerInput({\r\n        name: props.name,\r\n        // validators: props.validators,\r\n        validators: arrValidators(props.rules, props.required),\r\n        rules: props.rules,\r\n        optionList: props.optionList,\r\n      });\r\n    }, [props.optionList, props.name]);\r\n    // 劫持onChange回调 存储包装的输入的值形成上下文\r\n    const onChange = (val) => {\r\n      setFieldValue(props.name, val);\r\n      if (props.onChange) {\r\n        props.onChange(val);\r\n      }\r\n    };\r\n    const validateItem = () => {\r\n      const { rules, required } = props;\r\n      const validators = arrValidators(rules, required);\r\n      if (!validators) {\r\n        return [];\r\n      }\r\n      const messages = validators.reduce((result, validator) => {\r\n        const value = data[props.name];\r\n        let err = validator(value, rules);\r\n        return [...result, ...err];\r\n      }, []);\r\n\r\n      if (messages.length > 0) {\r\n        errors[props.name] = messages;\r\n      }\r\n      return errors[props.name];\r\n    };\r\n    const onBlur = () => {\r\n      let err = validateItem();\r\n      setFieldError(props.name, err);\r\n    };\r\n    return (\r\n      <InputComponent\r\n        {...props}\r\n        errors={inputErrors}\r\n        value={typeof inputValue === \"object\" ? inputValue.label : inputValue}\r\n        onBlur={onBlur}\r\n        onChange={onChange}\r\n      />\r\n    );\r\n  };\r\n  WrappedWithForm.propTypes = propTypes;\r\n  return WrappedWithForm;\r\n};\r\nexport default FormHoc;\r\n","E:\\Practice\\senior_2\\src\\components\\sign_form\\Form.jsx",[],"E:\\Practice\\senior_2\\src\\components\\sign_input\\Input.jsx",[],"E:\\Practice\\senior_2\\src\\components\\select_input\\Input.jsx",[],"E:\\Practice\\senior_2\\src\\components\\toast\\index.jsx",["77"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Toast } from \"./toast\";\r\nconst notice = (text, duration = 3000) => {\r\n  const div = document.createElement(\"div\");\r\n  document.body.appendChild(div);\r\n  console.log(document.getElementsByClassName(\"toast-wrap\")[0]);\r\n  if (!document.getElementsByClassName(\"toast-wrap\")[0]) {\r\n    let timer = setTimeout(() => {\r\n      clearTimeout(timer);\r\n      document.body.removeChild(div);\r\n    }, duration);\r\n    return ReactDOM.render(<Toast isShow={true} text={text} />, div);\r\n  }\r\n};\r\nexport default {\r\n  info(text, duration) {\r\n    return notice(text, duration);\r\n  },\r\n};\r\n","E:\\Practice\\senior_2\\src\\pages\\sign\\Sign.jsx",["78","79"],"E:\\Practice\\senior_2\\src\\router\\router.js",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":7,"column":3,"nodeType":"86","endLine":7,"endColumn":12,"suggestions":"87"},{"ruleId":"88","severity":1,"message":"89","line":15,"column":7,"nodeType":"90","endLine":15,"endColumn":40},{"ruleId":"84","severity":1,"message":"91","line":73,"column":6,"nodeType":"92","endLine":73,"endColumn":27,"suggestions":"93"},{"ruleId":"80","replacedBy":"94"},{"ruleId":"82","replacedBy":"95"},{"ruleId":"84","severity":1,"message":"96","line":31,"column":6,"nodeType":"92","endLine":31,"endColumn":12,"suggestions":"97"},{"ruleId":"80","replacedBy":"98"},{"ruleId":"82","replacedBy":"99"},{"ruleId":"84","severity":1,"message":"100","line":77,"column":8,"nodeType":"92","endLine":77,"endColumn":38,"suggestions":"101"},{"ruleId":"102","severity":1,"message":"103","line":16,"column":1,"nodeType":"104","endLine":20,"endColumn":3},{"ruleId":"105","severity":1,"message":"106","line":14,"column":20,"nodeType":"86","messageId":"107","endLine":14,"endColumn":31},{"ruleId":"88","severity":1,"message":"89","line":101,"column":9,"nodeType":"90","endLine":101,"endColumn":29},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setCourse'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props.location] as a second argument to the useEffect Hook.","Identifier",["110"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'getValue', 'props', and 'setStatus'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["111"],["108"],["109"],"React Hook useEffect has missing dependencies: 'errors.phone' and 'phoneStr'. Either include them or remove the dependency array.",["112"],["108"],["109"],"React Hook useEffect has missing dependencies: 'arrValidators', 'data', 'props.required', 'props.rules', and 'registerInput'. Either include them or remove the dependency array.",["113"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'setRequired' is assigned a value but never used.","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},"Add dependencies array: [props.location]",{"range":"122","text":"123"},"Update the dependencies array to be: [getValue, props, selectValue, setStatus, status]",{"range":"124","text":"125"},"Update the dependencies array to be: [data, errors.phone, phoneStr]",{"range":"126","text":"127"},"Update the dependencies array to be: [props.optionList, props.name, data, props.rules, props.required, registerInput, arrValidators]",{"range":"128","text":"129"},[418,418],", [props.location]",[2182,2203],"[getValue, props, selectValue, setStatus, status]",[1002,1008],"[data, errors.phone, phoneStr]",[2108,2138],"[props.optionList, props.name, data, props.rules, props.required, registerInput, arrValidators]"]